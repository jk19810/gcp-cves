spring.application.name=cve-project
server.port=8080

# ElasticSearch configuration
spring.elasticsearch.uris=https://localhost:9200
spring.elasticsearch.username=elastic
spring.elasticsearch.password=xxxxx

server.ssl.stream=https
server.ssl.host=localhost
server.ssl.port=9200
server.ssl.keystore.password=xxxxx
server.ssl.keystore.path=src/main/resources/cert/truststore.jks



# CSV related elastic query
elastic.csv.index.name=gcp-cves

elastic.query.search={"query": { "bool": { "should": [ { "match": { "#field#": "#keyword#" } }, { "wildcard": { "#field#": { "value": "*#keyword#*" } } } ] } } }

elastic.query.version-group={"query": { "bool": { "must": [ { "nested": { "path": "version_pairs", "query": { "bool": { "must": [ { "range": { "version_pairs.version_start": { "lte": "#version#" } } }, { "range": { "version_pairs.version_end": { "gte": "#version#" } } } ] } } } } ], "should": [ { "match": { "group": "#group#" } }, { "wildcard": { "group": { "value": "*#group#*" } } } ], "minimum_should_match": 1 }}}

elastic.query.version-artifact={"query": { "bool": { "must": [ { "nested": { "path": "version_pairs", "query": { "bool": { "must": [ { "range": { "version_pairs.version_start": { "lte": "#version#" } } }, { "range": { "version_pairs.version_end": { "gte": "#version#" } } } ] } } } } ], "should": [ { "match": { "artifact": "#artifact#" } }, { "wildcard": { "artifact": { "value": "*#artifact#*" } } } ], "minimum_should_match": 1 }}}

elastic.query.version={ "query": { "nested": { "path": "version_pairs", "query": { "bool": { "must": [ { "range": { "version_pairs.version_start": { "lte": "#version#" } } }, { "range": { "version_pairs.version_end": { "gte": "#version#" } } } ] } } } } }

elastic.query.wildcard={ "query": {"bool": { "should": [ { "nested": { "path": "version_pairs", "query": { "bool": { "must": [ { "range": { "version_pairs.version_start": { "lte": "#keyword#" } } }, { "range": { "version_pairs.version_end": { "gte": "#keyword#" } } } ] } } } }, { "match": { "artifact": "#keyword#" } }, { "wildcard": { "artifact": { "value": "*#keyword#*" } } }, { "match": { "group": "#keyword#" } }, { "wildcard": { "group": { "value": "*#keyword#*" } } } ] } } }

elastic.query.count={ "size": 0, "aggs": { "split_groups": { "terms": { "script": { "source": "String groupValue = doc['group.keyword'].value;\\ndef matcher = /([^\\\\.]+)/.matcher(groupValue);\\ndef parts = [];\\nwhile (matcher.find()) {\\n  parts.add(matcher.group(0));\\n}\\nif (parts.size() > 2) {\\n  return parts[1];\\n} else {\\n  return null;\\n}", "lang": "painless" }, "size": 100 } } } }

elastic.query.keyword={ "query": { "wildcard": { "group": "*#keyword#*" } }, "_source": ["cveMetadata.cveId", "group", "artifact", "versions", "cveMetadata.datePublished"] }

# OSV related elastic query
elastic.osv.index.name=new-cves

elastic.query.osv.keyword={ "query": { "wildcard": { "Package.keyword": "*#keyword#*" } }, "_source": ["Id", "Package", "Summary", "Published", "Attributes"] }
elastic.query.osv.count={ "size": 0, "aggs": { "package_counts": { "terms": { "script": { "source": "if (doc.containsKey('Package.keyword') && doc['Package.keyword'].size() > 0) { String packageValue = doc['Package.keyword'].value; int colonIndex = packageValue.indexOf(':'); int slashIndex = packageValue.indexOf('/'); int minIndex = -1; if (colonIndex != -1 && (minIndex == -1 || colonIndex < minIndex)) { minIndex = colonIndex; } if (slashIndex != -1 && (minIndex == -1 || slashIndex < minIndex)) { minIndex = slashIndex; } if (minIndex != -1) { return packageValue.substring(0, minIndex); } return packageValue; } return '';", "lang": "painless" }, "size": 100 } } } }